{
  
    
        "post0": {
            "title": "Binary Search or Bust",
            "content": "Why should you care? . Binary search is useful for searching through a set of values (which typically are sorted) efficiently. At each step, it reduces the search space by half, thereby running in $O(log(n))$ complexity. While it sounds simple enough to understand, it is deceptively tricky to implement and use in problems. Over the next few sections, let&#39;s take a look at binary search and it can be applied to some commonly encountered interview problems. . A Recipe for Binary Searching . How does binary search reduce the search space by half? It leverages the fact that the input is sorted (most of the time) and compares the middle value of the search space at any step with the target value that we&#39;re searching for. If the middle value is smaller than the target, then we know that the target can only lie to its right, thus eliminating all the values to the left of the middle value and vice versa. So what information do we need to implement binary search? . The left and right ends of the search space | The target value we&#39;re searching for | What to store at each step if any | Here&#39;s a nice video which walks through the binary search algorithm: . Next, let&#39;s look at an implementation of vanilla binary search. . def binary_search(nums: List[int], target: int) -&gt; int: &quot;&quot;&quot;Vanilla Binary Search. Given a sorted list of integers and a target value, find the index of the target value in the list. If not present, return -1. &quot;&quot;&quot; # Left and right boundaries of the search space left, right = 0, len(nums) - 1 while left &lt;= right: # Why not (left + right) // 2 ? # Hint: Doesn&#39;t matter for Python middle = left + (right - left) // 2 # Found the target, return the index if nums[middle] == target: return middle # The middle value is less than the # target, so look to the right elif nums[middle] &lt; target: left = middle + 1 # The middle value is greater than the # target, so look to the left else: right = middle - 1 return -1 # Target not found . Here&#39;re a few examples of running our binary search implementation on a list and target values . Result of searching for 4 in [1, 4, 9, 54, 100, 123] : 1 Result of searching for 100 in [1, 4, 9, 54, 100, 123] : 4 Result of searching for 92 in [1, 4, 9, 54, 100, 123] : -1 . . Tip: Using the approach middle = left + (right - left) // 2 helps avoid overflow. While this isn&#39;t a concern in Python, it becomes a tricky issue to debug in other programming languages such as C++. For more on overflow, check out this article. . Before we look at some problems that can be solved using binary search, let&#39;s run a quick comparison of linear search and binary search on some large input. . def linear_search(nums: List[int], target: int) -&gt; int: &quot;&quot;&quot;Linear Search. Given a list of integers and a target value, return find the index of the target value in the list. If not present, return -1. &quot;&quot;&quot; for idx, elem in enumerate(nums): # Found the target value if elem == target: return idx return -1 # Target not found . Let&#39;s see the time it takes linear search and binary search to find $99999$ in a sorted list of numbers from $[1, 1000000]$ . Linear Search | . 5.19 ms ± 26.3 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . Binary Search | . 6.05 µs ± 46.9 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each) . Hopefully, that drives the point home :wink:. . Na&#239;ve Binary Search Problems . Here&#39;s a list of problems that can be solved using vanilla binary search (or slightly modifying it). Anytime you see a problem statement which goes something like &quot;Given a sorted list..&quot; or &quot;Find the position of an element&quot;, think of using binary search. You can also consider sorting the input in case it is an unordered collection of items to reduce it to a binary search problem. Note that this list is by no means exhaustive, but is a good starting point to practice binary search: . Search Insert Position | Find the Square Root of x | Find First and Last Position of Element in Sorted Array | Search in a Rotated Sorted Array | . In the problems above, we can either directly apply binary search or adapt it slightly to solve the problem. For example, take the square root problem. We know that the square root of a positive number $n$ has to lie between $[1, n / 2]$. This gives us the bounds for the search space. Applying binary search over this space allows us to find the a good approximation of the square root. See the implementation below for details: . def find_square_root(n: int) -&gt; int: &quot;&quot;&quot;Integer square root. Given a positive integer, return its square root. &quot;&quot;&quot; left, right = 1, n // 2 + 1 while left &lt;= right: middle = left + (right - left) // 2 if middle * middle == n: return middle # Found an exact match elif middle * middle &lt; n: left = middle + 1 # Go right else: right = middle - 1 # Go left return right # This is the closest value to the actual square root . Square root of 1 is: 1 Square root of 4 is: 2 Square root of 8 is: 2 Square root of 33 is: 5 Square root of 100 is: 10 . To Be Continued . Applying binary search to unordered data | Problems where using binary search isn&#39;t obvious | .",
            "url": "https://boolean-pandit.github.io/non-faangable-tokens/data%20structures%20&%20algorithms/coding%20interviews/searching/2022/05/03/binary-search-or-bust.html",
            "relUrl": "/data%20structures%20&%20algorithms/coding%20interviews/searching/2022/05/03/binary-search-or-bust.html",
            "date": " • May 3, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "The Big Why",
            "content": "A Ramble-free Preamble . The Why . There are a dime a dozen blogs, repositories, courses, yada yada on interviews. Why do we need yet another one released into the internet ether? The answer is that we don’t, but rather, I do. In this wonderful post, fast.ai co-founder Dr. Rachel Thomas explains the key benefits of having your own blog. Personally, I would like to get a deeper understanding of what I’m writing about and in the process, improve my technical writing. Additionally, my hope is that some of what I write helps folks who are at the same level as I currently am (A Padawan, newbie, insert your nickname here) and those who are aspiring to do better at this interviewing game. Eventually, I hope this blog becomes a reference point for me to return to and revisit things that need to be refreshed in memory. . The What . This is in no way aimed at being a comprehensive compendium for all things interviewing 1. I will focus on interesting coding problems, topics in system design and machine learning (used very loosely here :wink: ). In an interview setting, it’s pretty likely that you’ll face a problem or question which you’ve not encountered before (unless you’re into the obsessive and tiring leetcode grind 2, DDIA grind 3, etc., etc.). So, instead of trying to memorize everything you possibly can and hope for the best, why not try to build a solution from first principles and identify interesting patterns in the process? Furthermore, you have the best part of 40 minutes during the interview (excluding the hellos and byes and the “do you have any questions for me?” sections). What’s crucial is that you communicate clearly, and show your thought process, working collaboratively with your interviewer (usually, this is possible). . The How . That’s exactly what I’ll attempt to do here. Write about problems and solutions from first principles. Over the course of these posts, I’m curious to see what kinds of patterns and challenges emerge. For coding (a.k.a Data Structure &amp; Algorithm) questions, I’ll curate problems from a variety of topics and where possible, suggest similar problems. For system design, I’ll mixup concept deep dives along with problems that have been rumored to appear in actual interviews at some of these companies. For machine learning, I’ll look at interesting papers and some problems (both implementation and system design ones :smile: ). . With all this out of the way, Let’s get started! . https://techinterviewhandbook.org/introduction/ is a really good one for example &#8617; . | https://leetcode.com/ &#8617; . | https://dataintensive.net/ &#8617; . |",
            "url": "https://boolean-pandit.github.io/non-faangable-tokens/motivation/introduction/ramble/2022/01/01/the-big-why.html",
            "relUrl": "/motivation/introduction/ramble/2022/01/01/the-big-why.html",
            "date": " • Jan 1, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://boolean-pandit.github.io/non-faangable-tokens/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Ahoy! I’m a machine learning engineer who’s both puzzled by and curious about the ever growing list of things one must know well to interview at the FAANG MAANG MANGA (?) :thinking: companies. I enjoy solving problems and figured I could document my progress in this blog. If you find something useful, or feel something is missing, drop a note :) . This website is powered by :coffee: 1. . a brewed drink that one must consume reverently, permanently. &#8617; . |",
          "url": "https://boolean-pandit.github.io/non-faangable-tokens/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://boolean-pandit.github.io/non-faangable-tokens/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

  
  

}